name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-fpm:
    name: Build with fpm (${{ matrix.os }}, ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gfortran]
        include:
          - os: ubuntu-latest
            compiler: gfortran
            version: 11
          - os: macos-latest
            compiler: gfortran
            version: 12
          - os: windows-latest
            compiler: gfortran
            version: 11

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: ${{ matrix.compiler }}
        version: ${{ matrix.version }}

    - name: Setup fpm
      uses: fortran-lang/setup-fpm@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build library
      run: fpm build --profile release

    - name: Build examples
      run: fpm build --profile release --all-examples
      
    # TODO: Enable when tests are implemented
    # - name: Run tests
    #   run: fpm test

  build-cmake:
    name: Build with CMake (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release, Debug]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gfortran
        version: 11

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DFORGE_BUILD_EXAMPLES=ON \
              -DFORGE_BUILD_TESTS=OFF \
              -DFORGE_BACKEND_TCL_TK=OFF

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    # TODO: Enable when tests are implemented
    # - name: Test
    #   working-directory: build
    #   run: ctest -C ${{ matrix.build_type }} --output-on-failure

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # TODO: Add fprettify or findent for formatting checks
    # - name: Check Formatting
    #   run: fprettify --check --recursive src/

    - name: Check for TODO/FIXME
      run: |
        echo "Checking for TODO/FIXME markers..."
        grep -rn "TODO\|FIXME" src/ || true

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # TODO: Setup Ford for documentation generation
    # - name: Setup Ford
    #   run: pip install ford

    # - name: Generate Documentation  
    #   run: ford docs/ford_settings.md

    # - name: Upload Documentation
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: documentation
    #     path: docs/html/

    - name: Documentation check placeholder
      run: echo "Documentation generation will be enabled when Ford is configured"

